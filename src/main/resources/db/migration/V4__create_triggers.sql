CREATE TABLE IF NOT EXISTS imovel_total_despesas_mensais (
	idtotaldespesasmensais bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	totaldespesas double precision,
	data_referencia date,
	idimovel bigint NOT NULL,
	FOREIGN KEY (idimovel) REFERENCES imovel(idimovel)
);

CREATE OR REPLACE FUNCTION atualizar_total_despesas()
    RETURNS trigger AS $BODY$
begin

	if(select exists 
		(select idtotaldespesasmensais as idtdm, idimovel as idim, EXTRACT(MONTH from data_referencia) as mes, EXTRACT(YEAR from data_referencia) as ano 
			from imovel_total_despesas_mensais 
			where idimovel = new.idimovel
			and EXTRACT(MONTH from data_referencia) = EXTRACT(MONTH from new.data)
			and EXTRACT(YEAR from data_referencia) = EXTRACT(YEAR from new.data))
	is true) then 
		update imovel_total_despesas_mensais
			set totaldespesas = totaldespesas + (coalesce(new.agua, 0.0)+ coalesce(new.luz, 0.0) + coalesce(new.manutencao, 0.0) + coalesce(new.despesaavulsa, 0.0))
			where idimovel = new.idimovel
			and EXTRACT(MONTH from data_referencia) = EXTRACT(MONTH from new.data)
			and EXTRACT(YEAR from data_referencia) = EXTRACT(YEAR from new.data);
			raise notice 'total de despesas atualizadas';
	else 
		insert into imovel_total_despesas_mensais(idimovel, totaldespesas, data_referencia)
			values(new.idimovel, (coalesce(new.agua, 0.0) + coalesce(new.luz, 0.0) + coalesce(new.manutencao, 0.0) + coalesce(new.despesaavulsa, 0.0)), now());
		raise notice 'total de despesas criado';
	end if;
	return new;
	
end;
$BODY$ LANGUAGE 'plpgsql';

CREATE OR REPLACE TRIGGER atualizar_total_despesas_trigger
	BEFORE INSERT
	ON despesa
	FOR EACH ROW
	EXECUTE PROCEDURE atualizar_total_despesas();

CREATE TABLE IF NOT EXISTS imovel_total_receitas_mensais (
	idtotalreceitasmensais bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	totalreceitas double precision,
	data_referencia date,
	idimovel bigint NOT NULL,
	FOREIGN KEY (idimovel) REFERENCES imovel(idimovel)
);

CREATE OR REPLACE FUNCTION atualizar_total_receitas()
    RETURNS trigger AS $BODY$
begin

	if(select exists 
		(select idtotalreceitasmensais as idtrm, idimovel as idim, EXTRACT(MONTH from data_referencia) as mes, EXTRACT(YEAR from data_referencia) as ano 
			from imovel_total_receitas_mensais 
			where idimovel = new.idimovel
			and EXTRACT(MONTH from data_referencia) = EXTRACT(MONTH from new.data)
			and EXTRACT(YEAR from data_referencia) = EXTRACT(YEAR from new.data))
	is true) then 
		update imovel_total_receitas_mensais
			set totalreceitas = totalreceitas + (coalesce(new.aluguel, 0.0) + coalesce(new.receitaavulsa, 0.0))
			where idimovel = new.idimovel
			and EXTRACT(MONTH from data_referencia) = EXTRACT(MONTH from new.data)
			and EXTRACT(YEAR from data_referencia) = EXTRACT(YEAR from new.data);
			raise notice 'total de receitas atualizadas';
	else 
		insert into imovel_total_receitas_mensais(idimovel, totalreceitas, data_referencia)
			values(new.idimovel, (coalesce(new.aluguel, 0.0) + coalesce(new.receitaavulsa, 0.0)), now());
		raise notice 'total de receitas criado';
	end if;
	return new;
	
end;
$BODY$ LANGUAGE 'plpgsql';

CREATE OR REPLACE TRIGGER atualizar_total_receitas
	BEFORE INSERT
	ON receita
	FOR EACH ROW
	EXECUTE PROCEDURE atualizar_total_receitas();
	
CREATE OR REPLACE FUNCTION atualizar_preco_imovel()
	RETURNS trigger AS $imovel_trigger$
begin

	update imovel
		set preco = new.valor
		where idimovel = new.idimovel;
	raise notice 'preço do imóvel atualizado com sucesso';
	return new;
	
end;
$imovel_trigger$ language 'plpgsql';

CREATE OR REPLACE TRIGGER atualizar_preco_imovel_trigger
	BEFORE INSERT
	ON avaliacao
	FOR EACH ROW
	EXECUTE PROCEDURE atualizar_preco_imovel();
	